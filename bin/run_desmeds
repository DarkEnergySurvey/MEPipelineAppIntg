#!/usr/bin/env python

import argparse
import os
import sys
import time
from despymisc.miscutils import elapsed_time
import subprocess

import fitsio
import despyastro
from despydb import desdbi

EXE = 'desmeds-make-meds-desdm'

def make_coadd_object_map(args):

    """ Writes out a map between the SExtractor NUMBER and COADD_OBJECT.ID """

    catname = os.path.basename(args.coadd_cat_url)

    # Get a dbh handle to query
    dbh = desdbi.DesDbi(section=args.db_section)
    # Format and query with query2rec
    QUERY_MAP = "select OBJECT_NUMBER,ID from COADD_OBJECT where FILENAME='%s' order by object_number" % catname
    map_data = despyastro.query2rec(QUERY_MAP,dbhandle=dbh)
    
    # Write a fits file with the record array
    fitsio.write(args.coadd_object_map, map_data, extname='OBJECTS',clobber=True)
    print "Wrote COADD_OBJECT map to: %s" % args.coadd_object_map
    return 

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Create the input yaml files for MED files and runs it")
    parser.add_argument("--band", type=str, action="store",default=None, required=True,
                        help="Band")
    parser.add_argument("--coadd_cat", dest='coadd_cat_url', type=str,action="store",default=None, required=True,
                        help="The name of the coadd catalog")
    parser.add_argument("--coadd_image", dest='coadd_image_url',type=str, action="store",default=None, required=True,
                        help="The name of the coadd image")
    parser.add_argument("--coadd_seg", dest='coadd_seg_url', type=str, action="store",default=None, required=True,
                        help="The name of the coadd SExtractor ")
    parser.add_argument("--coadd_magzp", type=float, action="store",default=30.0,
                        help="The coadd magnitude zero point")
    parser.add_argument("--nwg_flist", dest='nwgint_flist', type=str, action="store",default=None, required=True,
                        help="File list with ngwint images")
    parser.add_argument("--seg_flist", type=str, action="store",default=None, required=True,
                        help="File list with segmentation images")
    parser.add_argument("--bkg_flist", type=str, action="store",default=None, required=True,
                        help="File list with background images")
    parser.add_argument("--coadd_object_map", type=str, action="store",default=None,
                        help="File with map between COADD_OBJECT ID and SExtractor OBJECT_NUMBER")
    parser.add_argument("--db_section", type=str, action="store",default=None, #choices=['db-desoper','db-destest'],
                        help="Database section to connect")
    parser.add_argument("--meds_output", dest='meds_url', type=str, action="store",default=None, required=True,
                        help="The output MED name")
    parser.add_argument("--tileconf", type=str, action="store",default=None, required=True,
                        help="The generated (yaml) output fileconf for the tile where we want run")
    parser.add_argument("--medsconf", type=str, action="store",default=None, required=True,
                        help="The general (yaml) conf file")
    parser.add_argument("--dryrun", action="store_true",default=False,
                        help="Print and exit?")
    
    # Parse the args and get the extras
    args = parser.parse_args()

    # Make it a dictionary we can pop items out of it
    data = vars(args)

    # Make the coadd_objects maps if requested
    #if args.coadd_object_map and not args.dryrun:
    if args.coadd_object_map:
        make_coadd_object_map(args)
    else:
        del data['coadd_object_map']

    # Write the new yaml file, we pop from the dictionary
    tileconf = data.pop('tileconf',None)
    with open(tileconf,'w') as tileconfig_output:
        for key, value in data.iteritems():

            # Ignore args internal to the wrapper
            if key == 'dryrun' or key == 'medsconf' or key == 'db_section':
                continue

            if isinstance(value, str):
                value = '\"%s\"' % value
            tileconfig_output.write( "%-18s %s\n" %  (key+":", value))

    print "# Wrote yaml configuration to: %s" % tileconf

    # Build the command
    cmd =  "%s %s %s" % (EXE, args.medsconf, tileconf)
    sys.stdout.flush()
    print "# Will execute:"
    print "# \t%s" % cmd
    print "# From full call:"
    print "# %s %s" % (os.path.basename(sys.argv[0]), " ".join(sys.argv[1:]))

    # Run the code
    t0 = time.time()
    status = 0
    if not args.dryrun:
        sys.stdout.flush()
        status = subprocess.call(cmd,shell=True)

    # Done
    print "# MEDs creation time: %s" % elapsed_time(t0)
    sys.exit(status)
