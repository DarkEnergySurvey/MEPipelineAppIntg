#!/usr/bin/env python3

import argparse
import os
import sys
import time
from despymisc.miscutils import elapsed_time
import subprocess
from mepipelineappintg import fitvd_tools
import despyastro
from despydb import desdbi
import fitsio
import numpy
import numpy.lib.recfunctions as rfn

EXE = 'shredx'

QUERY_FORMAT = """
select OBJECT_NUMBER, ID
       FROM %s where FILENAME='%s' order by object_number
"""

def make_coadd_object_map(args):

    """ Writes out a map between the SExtractor NUMBER and COADD_OBJECT.ID """

    catname = os.path.basename(args.cat)
    tablename = args.coadd_object_tablename

    print("Getting connection to %s" % args.db_section)
    # Get a dbh handle to query
    dbh = desdbi.DesDbi(desfile=args.services, section=args.db_section, retry=True)
    # Format and query with query2rec
    QUERY_MAP = QUERY_FORMAT % (tablename, catname)
    print("# Will execute query to map ID to OBJECT_NUMBER: ")
    print(QUERY_MAP)
    map_data = despyastro.query2rec(QUERY_MAP, dbhandle=dbh, verb=True)

    # Make sure we get an answer, if no entries found query2rec()
    # will return False
    if map_data is False:
        raise ValueError(f"ERROR: Query to {tablename} returned no objects, cannot create coadd_object map")
    else:
        print(f"# Sucessfull query to {tablename}")

    # Rename OBJECT_NUMBER to 'number' for shreder
    map_data = rfn.rename_fields(map_data, {'OBJECT_NUMBER': 'number',})
    # Write a fits file with the record array
    fitsio.write(args.ids, map_data, extname='OBJECTS', clobber=True)
    print(f"# Wrote COADD_OBJECT map to: {args.ids}")
    return


def main():

    parser = argparse.ArgumentParser(description="Define the inputs for ngmixit and run")

    parser.add_argument("--tilename", type=str, action="store", default=None, required=True,
                        help="Name of tilename to process")
    parser.add_argument("--cat", type=str, action="store", default=None, required=True,
                        help="The name of the coadd catalog")
    parser.add_argument("--coadd_ima_list", type=str, action="store", default=None, required=True,
                        help="The name of the file with coadd images")
    parser.add_argument("--coadd_psf_list", type=str, action="store", default=None, required=True,
                        help="The name of the file with coadd psfs")
    parser.add_argument("--bands", type=str, action="store", default=None, required=True, nargs='+',
                        help="Ordered list of bands to use")
    parser.add_argument("--nranges", type=int, action="store", default=None, required=True,
                        help="Number of ranges needed (i.e. number of CPUs)")
    parser.add_argument("--wrange", type=int, action="store", default=None, required=True,
                        help="Which range to use, [0, NRANGES-1]")
    parser.add_argument("--seed_shift", type=str, action="store", default=None, required=False,
                        help="Optional seed shift string of integers")
    parser.add_argument("--dryrun", action="store_true", default=False,
                        help="Just print the command to be executed and exit?")
    parser.add_argument("--ids", type=str, action="store", default=None,
                        help="File with map between COADD_OBJECT ID and SExtractor OBJECT_NUMBER")
    parser.add_argument("--coadd_object_tablename", type=str, action="store", default='COADD_OBJECT',
                        help="Name of the table with COADD_OBJECT")
    parser.add_argument("--db_section", type=str, action="store", default=None,
                        # choices=['db-desoper','db-destest'],
                        help="Database section to connect")
    parser.add_argument("--services", type=str, action="store", default=None,
                        help="services file name")

    ignore_options = ['coadd_ima_list', 'coadd_psf_list', 'nranges', 'wrange', 'dryrun',
                      'tilename', 'seed_shift', 'bands', 'meds_list',
                      'db_section', 'coadd_object_tablename']
    # Parse the known and extra args (as a list)
    args, unknownargs = parser.parse_known_args()

    # Make it a dictionary we can pop items out of it
    data = vars(args)

    # Make the coadd_objects maps if requested
    # if args.coadd_object_map and not args.dryrun:
    if args.ids:
        make_coadd_object_map(args)
    else:
        del data['ids']

    # Fix the bands comma separated into a real list
    args.bands = fitvd_tools.parse_comma_separated_list(args.bands)

    # Get the list of coadd images and psf
    coadd_ima_files = fitvd_tools.read_meds_list(args.coadd_ima_list)
    coadd_psf_files = fitvd_tools.read_meds_list(args.coadd_psf_list)

    # Extract the fof-file, use this method because of
    # the non-standard '--fof-file' argument
    if '--fofs' in unknownargs:
        fof_file_idx = unknownargs.index('--fofs')
        fof_file = unknownargs[fof_file_idx+1]
        # Get the number of objects to fit from fof file
        nfit = fitvd_tools.find_number_fof(fof_file, ext='fof_id')

    # Get the job bracketing
    j1, j2 = fitvd_tools.getrange(args.wrange, nfit, args.nranges)
    print(f"# Found {nfit} nfit")
    print(f"# will run chunk {args.wrange}, between {j1}-{j2} jobs")

    # Add the fof-range to the command line
    unknownargs.insert(0, f"--start {j1}")
    unknownargs.insert(1, f"--end {j2}")

    # Get the seed based on tilename and chunck/wrange and add it to
    # the commandline unknownargs
    seed = fitvd_tools.chunkseed(args.tilename, args.wrange, shift='')
    unknownargs.insert(2, f"--seed {seed}")

    # And now we append to unknownargs the meds files
    ima_list = " ".join([coadd_ima_files[band] for band in args.bands])
    psf_list = " ".join([coadd_psf_files[band] for band in args.bands])
    unknownargs.insert(3, f"--images {ima_list}")
    unknownargs.insert(4, f"--psf {psf_list}")

    # Make it a dictionary we can pop items out of it
    dict_args = vars(args)

    # We build the command-list from the known (additional) arguments
    cmdlist = [EXE]
    for key in dict_args:
        if key in ignore_options:
            continue
        print(f"# \t--{key} {vars(args)[key]}")
        cmdlist.append("--%s" % key)
        cmdlist.append(dict_args[key])
    # plus the extra args which are directly passed to ngmixit
    for uarg in unknownargs:
        cmdlist.append(uarg)

    # The full command in one line
    cmd = ' '.join(map(str, cmdlist))
    print("# Will execute:")
    print(f"# \t{cmd}")

    # Run the code now
    t0 = time.time()
    status = 0
    if not args.dryrun:
        sys.stdout.flush()
        status = subprocess.call(cmd, shell=True)
    # Done
    print(f"# {EXE} run time: {elapsed_time(t0)}")
    sys.exit(status)

if __name__ == "__main__":
    main()
