#!/usr/bin/env python3

"""
    A simple script to make the stiff call for the ME Pipeline that
    will create the ptif files
"""

import os
import sys
import argparse
import time
from despymisc.miscutils import elapsed_time

PTIF_BANDS = ['g', 'r', 'i', 'z', 'Y', 'det', 'u']
STIFF_EXE = 'stiff'
BKLINE = "\\\n"
DETNAME = 'det'

def list2dict(v):
    return dict(v[i:i+2] for i in range(0, len(v), 2))

def read_bandlist(bandlist, verb=False):
    _bandnames = {}
    if verb:
        print(f"# Reading bandlist from file: {bandlist}")
    for line in open(bandlist).readlines():
        if line.startswith("#"):
            continue
        band = line.split()[1]
        _bandnames[band] = line.split()[0]

    return _bandnames

def read_maxlevels(levellist, verb=False):
    if verb:
        print(f"# Reading MAX_LEVEL list from file: {levellist}")

    levels = {}
    for line in open(levellist).readlines():
        if line.startswith("#"):
            continue
        band = line.split()[0]
        levels[band] = line.split()[1]

    return levels

def build_call(bandanames, maxlevels, **kwargs):

    if kwargs['verb']:
        print("# Build call PTIF call")

    # Make sure that we use the intersection of both lists
    bands_present = list(set(bandanames.keys()) & set(maxlevels.keys()))
    filenames = [f"{bandnames[band]}" for band in PTIF_BANDS if band in bands_present]
    maxvalues = [maxlevels[band] for band in PTIF_BANDS if band in bands_present]

    cmd_list = []
    cmd_list.append(f"{STIFF_EXE}")
    cmd_list.extend(filenames)

    pars = {}
    pars['-MAX_LEVEL'] = ','.join(maxvalues)
    pars['-NTHREADS'] = 1
    pars['-DESCRIPTION'] = "'Pseudo Color of coadded image created by DESDM/NCSA'"
    pars['-COPYRIGHT'] = "'Dark Enery Survey and NCSA/University of Illinois'"

    # Update and overide the parameters from the command line
    pars.update(kwargs['stiff_parameters'])

    # Go over all of the modifications
    for param, value in pars.items():
        # Make sure the Astromatic params start with '-' like -OUTFILE_NAME
        if param[0] != '-':
            print(f"# adding '-' to Stiff param {param}")
            param = '-' + param
        cmd_list.append(f"{param} {value}")

    if kwargs['verb']:
        print("# Will execute:\n")
        print(f"{BKLINE.join(cmd_list)}\n")

    if not kwargs['dryrun']:
        cmd_exe = f"{' '.join(cmd_list)}\n"
        os.system(cmd_exe)


def main():

    parser = argparse.ArgumentParser(description="Call stiff for ptif creatio for the Multi-epoch pipeline")
    parser.add_argument("bandlist", action="store", default=None,
                        help="List of coadd fits files to use")
    parser.add_argument("--detimage", action="store", default=None, required=True,
                        help="The name of the detection image")
    parser.add_argument("--config_maxlevel", action="store", default=None, required=True,
                        help="MAX_LEVEL config file")
    parser.add_argument("--verb", action="store_true", default=False,
                        help="Verbose?")
    parser.add_argument("--dryrun", action="store_true", default=False,
                        help="Print and exit?")

    # Parse the args and get the extras
    args, extra_args = parser.parse_known_args(sys.argv[1:])

    # Parse the extras args list into a dictionary
    args.stiff_parameters = list2dict(extra_args)

    t0 = time.time()

    # Read in the list and load it into a dictionary
    bandnames = read_bandlist(args.bandlist, verb=args.verb)
    # Append the detname to the dictionary
    bandnames[DETNAME] = args.detimage

    # Read in the MAX_LEVEL
    max_levels = read_maxlevels(args.config_maxlevel, verb=args.verb)

    # Make the call
    build_call(bandnames, max_levels, **vars(args))

    # Done
    print(f"# Stiff PTIF creation time: {elapsed_time(t0)}")


if __name__ == "__main__":
    main()
