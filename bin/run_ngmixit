#!/usr/bin/env python

import argparse
import os
import sys
import time
from despymisc.miscutils import elapsed_time
import subprocess
import math
import fitsio

EXE = 'ngmixit'

def find_number_fof(filename,ext):
    header = fitsio.read_header(filename,ext=ext)
    return header['NAXIS2']

def getrange(n,nfof,nranges):

    chunck_size = math.ceil( float(nfof)/float(nranges) )
    chunck_size = int(chunck_size)
    j1 = (n-1)*chunck_size
    j2 = n*chunck_size - 1
    # Make sure we won't assing more jobs
    if j2 > nfof-1:
        j2 = nfof-1
    return j1,j2

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Define input for ngmixit and run")
    parser.add_argument("--nranges", type=int, action="store",default=None, required=True,
                        help="Number of ranges needed (i.e. number of CPUs)")
    parser.add_argument("--wrange", type=int, action="store",default=None, required=True,
                        help="Which range to use, [0, NRANGES-1]")
    #parser.add_argument("--fof-file", type=str,action="store",default=None, required=True,
    #                    help="File with FoF definitions.")
    parser.add_argument("--dryrun", action="store_true",default=False,
                        help="Print and exit?")


    ignore_options = ['nranges','wrange','dryrun']
    # Parse the known and extra args (as a list)
    args, unknownargs = parser.parse_known_args()

    fof_file_idx = unknownargs.index('--fof-file')
    fof_file = unknownargs[fof_file_idx+1]

    # Get the number of FoF
    nfof = find_number_fof(fof_file,ext=1)
    print "Found %s FoF" % nfof
    # Get the job bracketing
    j1,j2 = getrange(args.wrange,nfof,args.nranges)

    # Add the fof-range to the command line
    unknownargs.insert(0,"--fof-range %s,%s" % (j1,j2))

    # Make it a dictionary we can pop items out of it
    dict_args = vars(args)
    
    cmdlist = [EXE]
    print "# Will run:"
    print "# %s " % EXE
    for key in dict_args:
        if key in ignore_options: continue
        print "# \t--%-10s\t%s" % (key,vars(args)[key])
        cmdlist.append("--%s" % key)
        cmdlist.append(dict_args[key])
    print "# \t%s" % " ".join(unknownargs)
    for uarg in unknownargs:
        cmdlist.append(uarg)

    cmd = ' '.join(map(str, cmdlist))
    #print cmdlist
    print "#"
    print cmd

