#!/usr/bin/env python3

import argparse
import sys
import time
import subprocess
from despymisc.miscutils import elapsed_time
from mepipelineappintg import meappintg_tools

EXE = 'desclass'

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Define the inputs for desclass and run")

    parser.add_argument("--tilename", type=str, action="store", default=None, required=True,
                        help="Name of tilename to process")
    parser.add_argument("--meds_list", type=str, action="store", default=None, required=True,
                        help="Name of file containing filenames and bands for the input meds")
    parser.add_argument("--nranges", type=int, action="store", default=None, required=True,
                        help="Number of ranges needed (i.e. number of CPUs)")
    parser.add_argument("--wrange", type=int, action="store", default=None, required=True,
                        help="Which range to use, [0, NRANGES-1]")
    parser.add_argument("--seed_shift", type=str, action="store", default=None, required=False,
                        help="Optional seed shift string of integers")
    parser.add_argument("--dryrun", action="store_true", default=False,
                        help="Just print the command to be executed and exit?")

    ignore_options = ['nranges', 'wrange', 'dryrun', 'meds_list', 'tilename', 'seed_shift']
    # Parse the known and extra args (as a list)
    args, unknownargs = parser.parse_known_args()

    # Get the list of med files
    meds_files = meappintg_tools.read_meds_list(args.meds_list)

    # And now we append to unknownargs the meds files
    flist = ' '.join([value for key, value in meds_files.items()])
    unknownargs.insert(0, f"--flist {flist}")

    # We get the nfit from the first band file mof
    nfit = meappintg_tools.find_number_meds(meds_files['r'])
    # Uniform allocation
    j1, j2 = meappintg_tools.getrange(args.wrange, nfit, args.nranges)
    print(f"# Found {nfit} nfit")
    print(f"# will run chunk {args.wrange}, between {j1}-{j2} jobs")

    # Add the fof-range to the command line
    unknownargs.insert(1, f"--start {j1}")
    unknownargs.insert(2, f"--end {j2}")

    # Get the seed based on tilename and chunck/wrange and add it to the
    # command-line unknownargs
    seed = meappintg_tools.chunkseed(args.tilename, args.wrange, shift='')
    unknownargs.insert(3, f"--seed {seed}")

    # Make it a dictionary we can pop items out of it
    dict_args = vars(args)

    # We build the command-list from the known (additional) arguments
    cmdlist = [EXE]
    for key in dict_args:
        if key in ignore_options:
            continue
        print(f"# \t--{key:-10s}\t{vars(args)[key]}")
        cmdlist.append(f"--{key}")
        cmdlist.append(dict_args[key])
    # plus the extra args which are directly passed to ngmixit
    for uarg in unknownargs:
        cmdlist.append(uarg)

    # The full command in one line
    cmd = ' '.join(map(str, cmdlist))
    print("# Will execute:")
    print(f"# \t{cmd}")

    # Run the code now
    t0 = time.time()
    status = 0
    if not args.dryrun:
        sys.stdout.flush()
        status = subprocess.call(cmd, shell=True)
    # Done
    print(f"# {EXE} creation time: {elapsed_time(t0)}")
    sys.exit(status)
